trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

stages:
- stage: static
  displayName: Static Analysis
  jobs:
  - job: checks
    displayName: static code analysis
    pool:
      vmImage: ubuntu-22.04
    steps:
      # Use Python >=3.8 for syntax validation
    - task: UsePythonVersion@0
      displayName: Set up python
      inputs:
        versionSpec: 3.8

      # Run syntax validation on a shallow clone
    - bash: |
        libtbx.python "$(Pipeline.Workspace)/.azure-pipelines/syntax-validation.py"
      displayName: Syntax validation

      # Run flake8 validation on a shallow clone
    - bash: |
        libtbx.pip install flake8
        libtbx.python "$(Pipeline.Workspace)/.azure-pipelines/flake8-validation.py"
      displayName: Flake8 validation

- stage: build
  displayName: Build
  dependsOn:
  jobs:
  - job: build
    displayName: build package
    pool:
      vmImage: ubuntu-22.04
    steps:
    - task: UsePythonVersion@0
      displayName: Set up python
      inputs:
        versionSpec: 3.10

    - bash: |
        $(Pipeline.Workspace)/.azure-pipelines/setup-base
      displayName: Set up DIALS

    - bash: |
        set -ex
        libtbx.python setup.py sdist bdist_wheel
        mkdir -p dist/pypi
        shopt -s extglob
        mv -v dist/!(pypi) dist/pypi
        git archive HEAD | gzip > dist/repo-source.tar.gz
        ls -laR dist
      displayName: Build python package

    - task: PublishBuildArtifacts@1
      displayName: Store artifact
      inputs:
        pathToPublish: dist/
        artifactName: package

    - bash: libtbx.python "$(Pipeline.Workspace)/setup.py" checkdocs
      displayName: Check package description

- stage: tests
  displayName: Run unit tests
  dependsOn:
  - static
  - build
  jobs:
  - job: linux
    pool:
      vmImage: ubuntu-22.04
    strategy:
      matrix:
        python38:
          PYTHON_VERSION: 3.8
        python39:
          PYTHON_VERSION: 3.9
        python310:
          PYTHON_VERSION: 3.10
    steps:
    - template: ci.yml

- stage: deploy
  displayName: Publish release
  dependsOn:
  - tests
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  jobs:
  - job: pypi
    displayName: Publish pypi release
    pool:
      vmImage: ubuntu-22.04
    steps:
    - checkout: none

    - task: UsePythonVersion@0
      displayName: Set up python
      inputs:
        versionSpec: 3.8

    - task: DownloadBuildArtifacts@0
      displayName: Get pre-built package
      inputs:
        buildType: current
        downloadType: single
        artifactName: package
        downloadPath: $(System.ArtifactsDirectory)

    - script: |
        libtbx.pip install -U pip
        libtbx.pip install twine
      displayName: Install twine

    - task: TwineAuthenticate@1
      displayName: Set up credentials
      inputs:
        pythonUploadServiceConnection: pypi-screen19

    - bash: |
        libtbx.python -m twine upload -r pypi-screen19 --config-file $(PYPIRC_PATH) $(System.ArtifactsDirectory)/package/pypi/*.tar.gz $(System.ArtifactsDirectory)/package/pypi/*.whl
      displayName: Publish package
